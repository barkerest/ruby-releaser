#!/usr/bin/env ruby

##
# This script is just a simple method to automate revision bumping and tag creation for ruby based projects.
#
# The basic motivation was wanting something similar to rake release for use when I don't want to create a gem file.
# In this case, we have +git-release+.  Usage can be shown by running +git-release -help+.
#
# The project must have a git repo.  The repo should contain either +./version.rb+, +./lib/{project_name}/version.rb+,
# or +./config/version.rb+.  This file should have a module (name doesn't matter and a single line within the module
# defining the VERSION constant to a string.  The string should be in "major.minor.revision" format.
#
# The module should not contain any other code.  Nothing should appear before or after the module definition either.
# This file should only be used to define the version.
#
# This script can also execute +rake release+ if the +-gem+ option is provided.
#
# In essence, this script replaces several commands.
#   {increment version}
#   bundle
#   git add -A
#   git commit -am {message}
#
#
class Release

  BadOption = Class.new(StandardError)
  TagExists = Class.new(StandardError)
  ShowHelp = Class.new(StandardError)

  def initialize(args = [])
    @type = :revision
    @rake_release = false
    @perform = true
    @message = nil

    args ||= []

    up_next = nil

    args.each do |arg|
      if up_next
        up_next.call arg
        up_next = nil
      else
        opt = arg.to_s.downcase
	case opt
          when '-major'
            @type = :major
          when '-minor'
            @type = :minor
          when '-revision'
            @type = :revision
          when '-gem'
            @rake_release = true
          when '-none'
            @type = :no_change
          when '-pretend'
            @perform = false
          when '-path'
            up_next = Proc.new { |path| Dir.chdir(path) }
	  when '-h', '-?', '/?', '/h', '-help', '--help', '/help'
            raise ShowHelp
          else
            if @message.nil?
              @message = arg
            else
              raise BadOption, "Unknown parameter: #{arg}"
            end
        end
      end
    end

    if up_next
      raise BadOption, 'Missing parameter option.'
    end

    @root_path = `git rev-parse --show-toplevel`.to_s.partition("\n")[0].to_s.strip
    raise 'no git repo' unless $?.success?

    app_name = File.basename(@root_path)

    @ver_file =
        if File.exist?("#{@root_path}/version.rb")
          "#{@root_path}/version.rb"
        elsif File.exist?("#{@root_path}/lib/#{app_name}/version.rb")
          "#{@root_path}/lib/#{app_name}/version.rb"
        elsif File.exist?("#{@root_path}/config/version.rb")
          "#{@root_path}/config/version.rb"
        else
          raise 'cannot find version.rb'
        end

  end

  def self.help
    puts <<-EOHELP
Usage: #{$0} [message] [-path path] [-major|-minor|-revision] [-gem]
  If no message is specified, it defaults to 'major|minor|revision version increment'.
  -path path  Sets the root path to work in.  This must have a git repo.
  -major      Increments the major version number    (ie - 1.0.0 => 2.0.0)
  -minor      Increments the minor version number    (ie - 1.0.0 => 1.1.0)
  -revision   Increments the revision version number (ie - 1.0.0 => 1.0.1)
  -none       Do not change the version number       (ie - 1.0.0 => 1.0.0)
              The default is to increment the revision.
  -gem        Pushes the gem to rubygems.org.
  -pretend    Do not make any changes.
    EOHELP
  end

  def run
    orig_m, orig_n, orig_r = get_version
    m,n,r = orig_m, orig_n, orig_r
    if @type == :major
      m += 1
      n = 0
      r = 0
    elsif @type == :minor
      n += 1
      r = 0
    elsif @type == :revision
      r += 1
    end

    # confirm pretend mode if needed.
    puts '== PRETEND ==' unless @perform

    # show version change.
    puts "Version #{orig_m}.#{orig_n}.#{orig_r} => #{m}.#{n}.#{r}"
    set_version m, n, r

    # update gemfile.lock
    begin
      `bundle` if @perform
    rescue
      nil # no errors if bundle fails or doesn't exist.
    end

    # create tag
    create_tag m, n, r

    # rake release
    if @rake_release
      begin
        `rake release` if @perform
      rescue
        puts "Failed to perform 'rake release'."
      end
    end
  end

  private

  def version_regex
    /^(?<PREFIX>\s*module\s+[A-Za-z0-9_]+\s+VERSION\s*=\s*)['"](?<VALUE>[^'"]*)['"](?<POSTFIX>\s+end\s*)$/
  end

  def get_version
    contents = File.read(@ver_file)
    version_regex.match(contents)['VALUE'].to_s.split('.').map{|v| v.to_i}
  end

  def set_version(major, minor, revision)
    new_version = "#{major}.#{minor}.#{revision}"
    if @perform
      contents = File.read(@ver_file)
      data = version_regex.match(contents)
      contents = "#{data['PREFIX']}\"#{new_version.to_s.gsub("\"", "\\\"")}\"#{data['POSTFIX']}"
      File.write(@ver_file, contents)
    end
  end

  def create_tag(major, minor, revision)
    tag = "v#{major}.#{minor}.#{revision}"
    message = case @type
                when :major
                  'major version increment'
                when :minor
                  'minor version increment'
                when :revision
                  'revision increment'
                else
                  'creating tag for version'
              end

    existing = `git tag -l "#{tag}"`.to_s.partition("\n")[0].to_s.strip
    if existing == ''
      puts "Creating tag #{tag}."
      if @perform
        `git add -A`
        `git commit -am "#{@message || message}"`
        `git push`
        `git tag -a "#{tag}" -m "#{message}"`
        `git push origin "#{tag}"`
      end
    else
      # this should only occur with the -none flag.
      raise TagExists
    end
  end

end

if $0==__FILE__
  begin
    Release.new(ARGV).run
  rescue Release::ShowHelp
    Release.help
  rescue Release::BadOption => ex
    puts 'ERROR: ' + ex.message
    Release.help
  rescue Release::TagExists
    puts 'There is already a tag in the git repo for this version.'
  end
end
